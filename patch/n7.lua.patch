226,257d225
< local day_intro_shader = love.graphics.newShader([[#define SIZE 0.15
< uniform float effect_param;
< bool side(vec2 a, vec2 b, vec2 c) {
< 	return ((b.x - a.x)*(c.y - a.y) - (b.y - a.y)*(c.x - a.x)) > 0.0;
< }
< float line_dist(vec2 pt1, vec2 pt2, vec2 testPt) {
<   vec2 lineDir = pt2 - pt1;
<   vec2 perpDir = vec2(lineDir.y, -lineDir.x);
<   vec2 dirToPt1 = pt1 - testPt;
<   return abs(dot(normalize(perpDir), dirToPt1));
< }
< vec4 effect(vec4 color, Image tex, vec2 uv, vec2 screen_coords) {
< 	vec2 iuv = vec2(uv.x, 1.0 - uv.y * 600 / 800);
< 	vec2 t1 = vec2(effect_param, 1.0);
< 	vec2 t2 = vec2(1.0, effect_param);
< 	vec2 b1 = vec2(effect_param - SIZE, 1.0);
< 	vec2 b2 = vec2(1.0, effect_param - SIZE);
< 	if(side(t1, t2, iuv)) {
< 		return vec4(0.0, 0.0, 0.0, 1.0);
< 	} else if(side(b1, b2, iuv)) {
< 		if(iuv.x < effect_param || iuv.y < effect_param) {
< 			float t = 1.0 - clamp(line_dist(t1, t2, iuv) / min(SIZE, 1.0 - effect_param) + 0.25, 0.0, 1.0);
< 			t = 1.0 - t * t;
< 			return Texel(tex, uv) * vec4(t, t, t, 1);
< 		} else {
< 			float t = line_dist(b1, b2, iuv) / SIZE / 2.0 + 0.5;
< 			return vec4(t, t, t, 1);
< 		}
< 	} else {
< 		return Texel(tex, uv);
< 	}
< }]], nil)
274,275c242,244
< 	day_intro_shader:send("effect_param", i * 3 - 2)
< 	love.graphics.setShader(day_intro_shader)
---
> 	-- purposefully broken shader, game is unable to run with this
> 	-- day_intro_shader:send("effect_param", i * 3 - 2)
> 	-- love.graphics.setShader(day_intro_shader)
